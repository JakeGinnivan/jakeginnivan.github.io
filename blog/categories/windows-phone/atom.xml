<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Windows Phone | Jake Ginnivan's blog]]></title>
  <link href="http://jake.ginnivan.net/blog/categories/windows-phone/atom.xml" rel="self"/>
  <link href="http://jake.ginnivan.net/"/>
  <updated>2014-06-11T03:15:02+08:00</updated>
  <id>http://jake.ginnivan.net/</id>
  <author>
    <name><![CDATA[Jake Ginnivan]]></name>
    <email><![CDATA[jake@ginnivan.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WP7 MVC Debug and Tracing]]></title>
    <link href="http://jake.ginnivan.net/wp7-mvc-trace-logging-and-debugging/"/>
    <updated>2011-09-22T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/wp7-mvc-trace-logging-and-debugging</id>
    <content type="html"><![CDATA[<h2>WP7 Essentials Tracing</h2>

<p>A new feature coming in the next release is a super easy to use Trace class to allow you to debug your app really easily.</p>

<!-- more -->


<p>In your App.xaml.cs constructor simply put:</p>

<pre><code>#if DEBUG
    Trace.Appenders.Add(s=&gt;Debug.WriteLine(s));
    Trace.TraceLevel = TraceLevel.Debug;
#endif
</code></pre>

<p>Then the following code will output <code>9/23/2011 8:10 PM - Debug   [MyClass] - Some  Trace Message</code> in your Debug output window. You can add your own trace appenders too if you want to implement logging in your app.</p>

<pre><code>// this.GetType() == typeof(MyClass)
Trace.WriteInfo(this, TraceLevel.Debug, ()=&gt;"Some Trace Message");
</code></pre>

<p>Notice that we pass a lambda into the WriteInfo class, this is so the Trace class can be super lazy and if the message is not going to be written to the Trace appenders, it will not even construct that string (useful if you are doing more complex logging like checking memory usage etc).</p>

<h2>WP7 MVC Tracing</h2>

<p>I have been using this tracing ability in vNext of Windows Phone MVC to measure performance and start optimising. Here is an example of the full debug log when running</p>

<pre><code>9/23/2011 8:46 PM - Debug   [AutofacNavigationApplication] - Scanning for and Registering Autofac Modules
9/23/2011 8:46 PM - Debug   [AutofacNavigationApplication] - {
9/23/2011 8:46 PM - Debug   [AutofacNavigationApplication] -     Registering module ApplicationModule... 1ms
9/23/2011 8:46 PM - Debug   [AutofacNavigationApplication] - } 46ms
9/23/2011 8:46 PM - Debug   [AutofacNavigationApplication] - Building Container... 72ms
9/23/2011 8:46 PM - Debug   [NavigationApplicationActivator] - Handling WP7 Navigation Event to /Shell.xaml
9/23/2011 8:46 PM - Debug   [NavigationApplicationActivator] - {
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage before navigation: 8.54296875
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Navigating Forward to Home.MainPage
9/23/2011 8:46 PM - Info    [Navigator                     ] -     {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -         Locating controller Home
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -         {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -             Scanning assemblies for controllers and building lookup... 2ms
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -         } 10ms
9/23/2011 8:46 PM - Debug   [NavigationApplicationActivator] -     } 45ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Resolving best matching action MainPage on Home... 28ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Invoking controller action for Home.MainPage... 52ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult for Home.MainPage
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     {
9/23/2011 8:46 PM - Debug   [DefaultViewLocator            ] -         Scanning assemblies for views and building lookup... 3ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     } 214ms
9/23/2011 8:46 PM - Debug   [Journal                       ] -     Home.MainPage added to Journal
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult completion steps... 1ms
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage after navigation: 9.15234375
9/23/2011 8:46 PM - Info    [Navigator                     ] - } 526ms
9/23/2011 8:46 PM - Debug   [ControllerActions`1           ] - Parsing Navigation Expression
9/23/2011 8:46 PM - Debug   [ControllerActions`1           ] - {
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage before navigation: 9.23046875
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Navigating Forward to AnotherController.Example
9/23/2011 8:46 PM - Info    [Navigator                     ] -     {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -         Locating controller AnotherController... 0ms
9/23/2011 8:46 PM - Debug   [ControllerActions`1           ] -     } 14ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Resolving best matching action Example on AnotherController... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Invoking controller action for AnotherController.Example... 0ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult for AnotherController.Example... 44ms
9/23/2011 8:46 PM - Debug   [Journal                       ] -     AnotherController.Example added to Journal
9/23/2011 8:46 PM - Debug   [PageResult                    ] -     Cleaning up ViewModel MainViewModel... 1ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult completion steps... 0ms
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage after navigation: 10.90234375
9/23/2011 8:46 PM - Info    [Navigator                     ] - } 101ms
9/23/2011 8:46 PM - Debug   [Journal                       ] - AnotherController.Example popped from Journal
9/23/2011 8:46 PM - Debug   [Journal                       ] - Home.MainPage popped from Journal
9/23/2011 8:46 PM - Info    [Navigator                     ] - Memory usage before navigation: 9.1640625
9/23/2011 8:46 PM - Info    [Navigator                     ] - Navigating Backward to Home.MainPage
9/23/2011 8:46 PM - Info    [Navigator                     ] - {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -     Locating controller Home... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Resolving best matching action MainPage on Home... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Invoking controller action for Home.MainPage... 0ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult for Home.MainPage... 22ms
9/23/2011 8:46 PM - Debug   [Journal                       ] -     Home.MainPage added to Journal
9/23/2011 8:46 PM - Debug   [PageResult                    ] -     Cleaning up ViewModel ExampleViewModel... 0ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult completion steps... 1ms
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage after navigation: 10.55859375
9/23/2011 8:46 PM - Info    [Navigator                     ] - } 82ms
9/23/2011 8:46 PM - Info    [Navigator                     ] - Memory usage before navigation: 9.8359375
9/23/2011 8:46 PM - Info    [Navigator                     ] - Navigating Forward to Home.DebugPage
9/23/2011 8:46 PM - Info    [Navigator                     ] - {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -     Locating controller Home... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Resolving best matching action DebugPage on Home... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Invoking controller action for Home.DebugPage... 4ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult for Home.DebugPage... 104ms
9/23/2011 8:46 PM - Debug   [Journal                       ] -     Home.DebugPage added to Journal
9/23/2011 8:46 PM - Debug   [PageResult                    ] -     Cleaning up ViewModel MainViewModel... 0ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult completion steps... 0ms
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage after navigation: 13.82421875
9/23/2011 8:46 PM - Info    [Navigator                     ] - } 267ms
9/23/2011 8:46 PM - Info    [Navigator                     ] - Loading partial view Debug.DemoPartial
9/23/2011 8:46 PM - Info    [Navigator                     ] - {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -     Locating controller Debug... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Resolving best matching action DemoPartial on Debug... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Invoking controller action for Debug.DemoPartial... 2002ms
Partial Activated
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PartialViewResult completion steps... 2ms
9/23/2011 8:46 PM - Info    [Navigator                     ] - } 2040ms
9/23/2011 8:46 PM - Debug   [ControllerActions`1           ] - Parsing Navigation Expression
9/23/2011 8:46 PM - Debug   [ControllerActions`1           ] - {
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage before navigation: 15.98828125
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Navigating Forward to DebugController.PageWithResult
9/23/2011 8:46 PM - Info    [Navigator                     ] -     {
9/23/2011 8:46 PM - Debug   [DefaultControllerLocator      ] -         Locating controller DebugController... 0ms
9/23/2011 8:46 PM - Debug   [ControllerActions`1           ] -     } 12ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Resolving best matching action PageWithResult on DebugController... 0ms
9/23/2011 8:46 PM - Debug   [DefaultActionInvoker          ] -     Invoking controller action for DebugController.PageWithResult... 0ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult for DebugController.PageWithResult... 35ms
9/23/2011 8:46 PM - Debug   [Navigator                     ] -     Executing WindowsPhoneMVC.ActionResults.PageResult completion steps... 0ms
9/23/2011 8:46 PM - Info    [Navigator                     ] -     Memory usage after navigation: 17
9/23/2011 8:46 PM - Info    [Navigator                     ] - } 103ms
</code></pre>

<p>Now you may be saying one of two things, OMG that is way better than the OOTB profiler or you will be saying now my output window will be spammed!</p>

<p>Say we want to silence the Navigator because it logs a lot, we simply do:</p>

<pre><code>Trace.Filters.Add(typeof(Navigator));
</code></pre>

<p>And all Trace events from the Navigator class will be ignored. So you can find out useful information when you need it, and ignore it other times!</p>

<p>Keen to know what everyone thinks.</p>

<h2>Check it out at <a href="http://windowsphonemvc.codeplex.com/">http://windowsphonemvc.codeplex.com/</a></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WP7 Essentials Settings Provider]]></title>
    <link href="http://jake.ginnivan.net/wp7-essentials-settings-provider/"/>
    <updated>2011-09-09T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/wp7-essentials-settings-provider</id>
    <content type="html"><![CDATA[<p>Update: This project has been superseeded by <a href="https://github.com/JakeGinnivan/SettingsProvider.net">SettingsProvider.net</a></p>

<!-- more -->


<h1>Settings Provider?</h1>

<p>The settings provider is a port from the FunnelWeb settings provider to Windows Phone. It is a really simple interface</p>

<pre><code>public interface ISettingsProvider
{
    T GetSettings&lt;T&gt;() where T : ISettings, new();
    void SaveSettings&lt;T&gt;(T settings) where T : ISettings;
}
</code></pre>

<p>So what does <code>T</code> actually look like:</p>

<pre><code>public class ApplicationSettings : NotifyPropertyChanged, ISettings
{
    [DefaultValue(5)]
    [DisplayName("Number Results")]
    public int NumberResults { get; set; }

    public string Nickname { get; set; }

    [DefaultValue(true)]
    [DisplayName("Enable Stuff")]
    public bool EnableStuff { get; set; }

    public DateTime? Birthday { get; set; }

    [DisplayName("Some Options")]
    public Options SomeOptions { get; set; }
}

public enum Options
{
    Value1, 
    Value2
}
</code></pre>

<p>Pretty easy right? We can use NotifyPropertyWeaver to keep the class nice and clean. Then to fetch or persist our settings we just need to do</p>

<pre><code>var applicationSettings = settingsProvider.GetSettings&lt;ApplicationSettings&gt;();
applicationSettings.SomeOptions = Options.Value2;
settingsProvider.SaveSettings(applicationSettings);
</code></pre>

<p>The Settings Provider is limited to types supported by the Convert.ChangeType method (for a number of reasons, if this is too restrictive, let me know and why).</p>

<p>So in the last release we added the SettingsList control, which will generate this for you (just the settings control, not the page, highlighted in red is what you get generated)</p>

<p><img src="/assets/posts/2011-09-09-wp7-essentials-settings-provider/SettingsProvider.png" alt="Settings Provider control" /></p>

<p>This is a first cut, and over time I will polish this page, and add support for ordering the properties and stuff (or feel free to submit pull requests :)). But I recon this is pretty cool for a first cut.</p>

<p>Also the reason I am using a combobox instead of the ListPicker is there is a bug where the control simply doesn&rsquo;t work inside a scroll viewer. Bah. Anyone interested in doing a community fork which simply fixes bugs in the toolkit and doesn&rsquo;t add any new features?</p>

<h1>Get it</h1>

<p>This control is in a separate package (to keep the essentials package lean and mean :P).</p>

<pre><code>Install-Package WindowsPhoneEssentials.Controls.Settings
</code></pre>

<p><a href="http://wp7essentials.codeplex.com/">Codeplex</a><br/>
<a href="http://nuget.org/List/Search?searchTerm=WindowsPhoneEssentials">NuGet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Sessions at TechEd 2011]]></title>
    <link href="http://jake.ginnivan.net/teched-2011/"/>
    <updated>2011-08-29T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/teched-2011</id>
    <content type="html"><![CDATA[<h1>DEV304 - Adding Value to Software Projects with VSTO (Wed, 11:30am)</h1>

<p>This sessions will have something for everyone, if you have never used VSTO and are interested in it, I will be showing the value it has.
If you have used it, and hated it, I will also be showing how to improve your experience and give you a way of approaching the problems and some nice ways to improve the default experience. Part of this is a quick intro to COM Interop, how it works and how to make sure you avoid problems with it.
And finally, I will be showing a bit of VSTO contrib and how you can use IoC and other cool enhancements to the platform.</p>

<h1>WPH305 - Multi-Tasking and Application Services (Fri, 8:15am)</h1>

<p>In this session with Chris Walsh, we will be going through a whole lot of App services related features in Windows Phone Mango. We will cover things like Multi-Tasking, Background agents, Tiles, Notifications and Search extra&rsquo;s. We have some cool demo&rsquo;s and it will be a fun session.</p>

<h1>Demos</h1>

<p>I also have a few demo&rsquo;s lined up
 - Unit Testing with WP7 (1:30pm Wednesday)
 - Windows Phone MVC Intro (2:00pm Wednesday)</p>

<ul>
<li>Unit Testing with WP7 (1:00pm Wednesday)</li>
<li>Windows Phone MVC Intro (1:30pm Wednesday)</li>
</ul>


<p>If you attend, feedback is always welcomed and please submit your evals, it helps us as speakers a lot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MultiTargeted WP7 Project]]></title>
    <link href="http://jake.ginnivan.net/multitargeted-windows-phone-project/"/>
    <updated>2011-08-22T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/multitargeted-windows-phone-project</id>
    <content type="html"><![CDATA[<p>I saw Shawn Wildermuth&rsquo;s post on maintaining a project targeting multiple versions of windows phone, I thought I would share the way I do it as I think it is far easier than the alternatives.
<a href="http://wildermuth.com/2011/08/23/Maintaining_a_Project_with_Two_Windows_Phone_Versions">http://wildermuth.com/2011/08/23/Maintaining_a_Project_with_Two_Windows_Phone_Versions</a></p>

<!-- more -->


<h1>Multi-Targeted .csproj file</h1>

<p>First off I open up my .csproj file and add this under the initial property group</p>

<pre><code>&lt;TargetFrameworkProfile Condition="'$(TargetFrameworkProfile)' == ''"&gt;WindowsPhone71&lt;/TargetFrameworkProfile&gt;
</code></pre>

<p>This means I target Windows Phone 71 by default, then I modify the define constants property under each build configuration to be conditional:</p>

<pre><code>&lt;DefineConstants Condition="'$(TargetFrameworkProfile)' == 'WindowsPhone'"&gt;TRACE;SILVERLIGHT;WINDOWS_PHONE&lt;/DefineConstants&gt;
&lt;DefineConstants Condition="'$(TargetFrameworkProfile)' == 'WindowsPhone71'"&gt;TRACE;SILVERLIGHT;WINDOWS_PHONE71&lt;/DefineConstants&gt;
</code></pre>

<p>Now I can easily include files in only my mango build, for example:</p>

<pre><code>#if WINDOWS_PHONE71
namespace WindowsPhoneMVC.Navigation
{
    public static class DeepLink
    {
        public static string UriFor(string controller, string action, IDictionary&lt;string, string&gt; parameters)
        {
            var parametersString = string.Join("&amp;", parameters.Select(p =&gt; p.Key + "=" + p.Value));
            return string.Format("/Shell.xaml?controller={0}&amp;action={1}{2}{3}", controller, action, 
                string.IsNullOrEmpty(parametersString) ?  string.Empty : "&amp;", parametersString);
        }

        public static NavigationRequest DecodeUri(string navigationFrame, string deepLink)
        {
            var kvp = deepLink.Split(new[] {'&amp;'})
                .Select(o =&gt; o.Split(new[] {'='}))
                .ToDictionary(k =&gt; k[0], k =&gt; k[1]);

            string controller = null;
            if (kvp.ContainsKey("controller"))
            {
                controller = kvp["controller"];
                kvp.Remove("controller");
            }

            string action = null;
            if (kvp.ContainsKey("action"))
            {
                action = kvp["action"];
                kvp.Remove("action");
            }

            return new NavigationRequest(navigationFrame, controller, action, new NavigationParameter(kvp));
        }
    }
}
#endif
</code></pre>

<p>This way in visual studio I always build for 71, then my build.cmd which looks like this</p>

<pre><code>@echo off
call "%VS100COMNTOOLS%vsvars32.bat"
mkdir .\build\log\

msbuild.exe /ToolsVersion:4.0 "WindowsPhoneMVC.msbuild" 

pause
</code></pre>

<p>Then the important part of that msbuild script, which builds my project as 7.0 and 7.1. After it builds it goes on to create my NuGet packages and releases meaning I can make a fix and test the new NuGet package locally within minutes, it works quite nice.</p>

<pre><code>&lt;Target Name="Compile" DependsOnTargets="Version"&gt;
    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC\WindowsPhoneMVC.csproj"
             Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build;TargetFrameworkProfile=WindowsPhone;" /&gt;

    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC\WindowsPhoneMVC.csproj"
             Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build_71;TargetFrameworkProfile=WindowsPhone71;" /&gt;
&lt;/Target&gt;
</code></pre>

<h3>Complete build script</h3>

<p>Here is my complete build script if you are interested, or just go to <a href="http://windowsphonemvc.codeplex.com">http://windowsphonemvc.codeplex.com</a> to grab the latest version out of source control.</p>

<pre><code>&lt;Project DefaultTargets="Package" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;PropertyGroup&gt;
    &lt;MSBuildCommunityTasksPath&gt;$(MSBuildProjectDirectory)\build\lib\&lt;/MSBuildCommunityTasksPath&gt;
    &lt;Root&gt;$(MSBuildProjectDirectory)\&lt;/Root&gt;
    &lt;Major&gt;0&lt;/Major&gt;
    &lt;Minor&gt;4&lt;/Minor&gt;
    &lt;Build&gt;0&lt;/Build&gt;
    &lt;Revision&gt;0&lt;/Revision&gt;

    &lt;NuGet&gt;$(Root)build\lib\NuGet.exe&lt;/NuGet&gt;
    &lt;ContentSource&gt;$(Root)src\SampleProjects\NuGetContentSource\&lt;/ContentSource&gt;
  &lt;/PropertyGroup&gt;

  &lt;Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets"/&gt;
  &lt;Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Deployment.Tasks.Targets"/&gt;
  &lt;Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Mercurial.tasks"/&gt;

  &lt;Target Name="GetVersion"&gt;
    &lt;Error Condition="$(MSBuildCommunityTasksPath) == ''" Text="MSBuildCommunityTasksPath variable must be defined" /&gt;
    &lt;Error Condition="$(Root) == ''" Text="Root variable must be defined" /&gt;

    &lt;HgVersion LocalPath="."&gt;
      &lt;Output TaskParameter="Revision" PropertyName="Revision" /&gt;
    &lt;/HgVersion&gt;
    &lt;!-- Diagnostics --&gt;
    &lt;Message Text="Diagnostics:"/&gt;
    &lt;Message Text="Build Number:    $(Major).$(Minor).$(Build).$(Revision)" /&gt;
    &lt;Message Text="Project root:    $(Root)" /&gt;
    &lt;Message Text="Drop path:       build\Artifacts" /&gt;

    &lt;!-- Clean up --&gt;
    &lt;ItemGroup&gt;
      &lt;FilesToDelete Include="$(Root)**\bin\**\*.*" /&gt;
      &lt;FilesToDelete Include="$(Root)**\obj\**\*.*" /&gt;
    &lt;/ItemGroup&gt;
    &lt;Delete Files="@(FilesToDelete)" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="Version" DependsOnTargets="GetVersion"&gt;
    &lt;RemoveDir Directories="build\artifacts\" /&gt;
    &lt;RemoveDir Directories="build\temp\" /&gt;

    &lt;AssemblyInfo CodeLanguage="CS"
          OutputFile="$(Root)src\WindowsPhoneMVC\Properties\VersionInfo.cs"
          AssemblyVersion="$(Major).$(Minor).$(Build).$(Revision)"
          AssemblyFileVersion="$(Major).$(Minor).$(Build).$(Revision)"
          Condition="$(Revision) != '-1' "/&gt;
  &lt;/Target&gt;

  &lt;Target Name="Compile" DependsOnTargets="Version"&gt;
    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC\WindowsPhoneMVC.csproj"
         Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build;TargetFrameworkProfile=WindowsPhone;" /&gt;
    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC.Extensions.Transitions\WindowsPhoneMVC.Extensions.Transitions.csproj"
         Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build;TargetFrameworkProfile=WindowsPhone;" /&gt;
    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC.Extensions.AutofacIntegration\WindowsPhoneMVC.Extensions.AutofacIntegration.csproj"
         Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build;TargetFrameworkProfile=WindowsPhone;" /&gt;

    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC\WindowsPhoneMVC.csproj"
         Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build_71;TargetFrameworkProfile=WindowsPhone71;" /&gt;
    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC.Extensions.Transitions\WindowsPhoneMVC.Extensions.Transitions.csproj"
         Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build_71;TargetFrameworkProfile=WindowsPhone71;" /&gt;
    &lt;MSBuild Projects="$(Root)src\WindowsPhoneMVC.Extensions.AutofacIntegration\WindowsPhoneMVC.Extensions.AutofacIntegration.csproj"
         Properties="Configuration=Release;Platform=Any CPU;OutputPath=bin\Build_71;TargetFrameworkProfile=WindowsPhone71;" /&gt;

    &lt;MSBuild Projects="$(Root)src\Templates\WPMvcTemplatesExtension\WPMvcTemplatesExtension.csproj"
         Properties="Configuration=Release;OutputPath=bin\Build" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="NuGet" DependsOnTargets="Compile"&gt;
    &lt;MakeDir Directories="$(Root)build\artifacts" /&gt;

    &lt;ItemGroup&gt;
      &lt;AutofacContent Include="$(Root)build\autofaccontent\**\*.*" /&gt;
      &lt;TransitionsContent Include="$(Root)build\transitionscontent\**\*.*" /&gt;
    &lt;/ItemGroup&gt;

    &lt;!--Main NuGet package--&gt;
    &lt;CallTarget Targets="MvcNuGet" /&gt;
    &lt;CallTarget Targets="MvcLibsNuGet" /&gt;
    &lt;CallTarget Targets="AutofacNuGet" /&gt;
    &lt;CallTarget Targets="TransitionsNuGet" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="MvcNuGet"&gt;
    &lt;PropertyGroup&gt;
      &lt;NuGetManifest&gt;$(Root)build\temp\WindowsPhoneMVC.nuspec&lt;/NuGetManifest&gt;
      &lt;MainNuGetContent&gt;$(Root)build\temp\NuGet\content\&lt;/MainNuGetContent&gt;
    &lt;/PropertyGroup&gt;

    &lt;MakeDir Directories="$(Root)build\temp\NuGet\WindowsPhoneMVC\lib" /&gt;
    &lt;Copy SourceFiles="$(Root)build\WindowsPhoneMVC.nuspec"
              DestinationFiles="$(NuGetManifest)" /&gt;

    &lt;FileUpdate Files="$(NuGetManifest)"
                    Regex="0.0.0.1"
                    ReplacementText="$(Major).$(Minor).$(Build).$(Revision)"/&gt;

    &lt;Copy SourceFiles="$(ContentSource)Controllers\HomeController.cs" DestinationFolder="$(MainNuGetContent)Controllers\" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)ViewModels\Home\AboutViewModel.cs" DestinationFolder="$(MainNuGetContent)ViewModels\Home\" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)ViewModels\Home\MainViewModel.cs" DestinationFolder="$(MainNuGetContent)ViewModels\Home\" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)Views\Home\MainPage.xaml" DestinationFolder="$(MainNuGetContent)Views\Home\" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)Views\Home\MainPage.xaml.cs" DestinationFolder="$(MainNuGetContent)Views\Home\" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)Shell.xaml" DestinationFolder="$(MainNuGetContent)" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)Shell.xaml.cs" DestinationFolder="$(MainNuGetContent)" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)WindowsPhoneMVC_GettingStarted.htm" DestinationFolder="$(MainNuGetContent)" /&gt;

    &lt;ItemGroup&gt;
      &lt;MvcContentFiles Include="$(MainNuGetContent)\**\*.*" /&gt;
    &lt;/ItemGroup&gt;
    &lt;FileUpdate Files="@(MvcContentFiles)"
                    Regex="NuGetContentSource"
                    ReplacementText="$rootnamespace$"/&gt;
    &lt;Move SourceFiles="@(MvcContentFiles)"
              DestinationFiles="@(MvcContentFiles-&gt;'$(MainNuGetContent)%(RecursiveDir)%(Filename)%(Extension).pp')" /&gt;

    &lt;!--SL3--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC\bin\Build\WindowsPhoneMVC.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL3-WP\WindowsPhoneMVC.dll"/&gt;
    &lt;!--SL4--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC\bin\Build\WindowsPhoneMVC.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone\WindowsPhoneMVC.dll"/&gt;
    &lt;!--SL4_71--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC\bin\Build_71\WindowsPhoneMVC.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone71\WindowsPhoneMVC.dll"/&gt;
    &lt;Exec Command='"$(NuGet)" pack "$(NuGetManifest)" -BasePath "$(Root)build\temp\NuGet" -OutputDirectory "$(Root)build\artifacts"' /&gt;
    &lt;RemoveDir Directories="build\temp\" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="MvcLibsNuGet"&gt;
    &lt;PropertyGroup&gt;
      &lt;NuGetManifest&gt;$(Root)build\temp\WindowsPhoneMVC.Libs.nuspec&lt;/NuGetManifest&gt;
    &lt;/PropertyGroup&gt;

    &lt;MakeDir Directories="$(Root)build\temp\NuGet\WindowsPhoneMVC\lib" /&gt;
    &lt;Copy SourceFiles="$(Root)build\WindowsPhoneMVC.nuspec"
              DestinationFiles="$(NuGetManifest)" /&gt;

    &lt;FileUpdate Files="$(NuGetManifest)"
                    Regex="0.0.0.1"
                    ReplacementText="$(Major).$(Minor).$(Build).$(Revision)"/&gt;

    &lt;!--SL3--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC\bin\Build\WindowsPhoneMVC.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL3-WP\WindowsPhoneMVC.dll"/&gt;
    &lt;!--SL4--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC\bin\Build\WindowsPhoneMVC.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone\WindowsPhoneMVC.dll"/&gt;
    &lt;!--SL4_71--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC\bin\Build_71\WindowsPhoneMVC.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone71\WindowsPhoneMVC.dll"/&gt;
    &lt;Exec Command='"$(NuGet)" pack "$(NuGetManifest)" -BasePath "$(Root)build\temp\NuGet" -OutputDirectory "$(Root)build\artifacts"' /&gt;
    &lt;RemoveDir Directories="build\temp\" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="AutofacNuGet"&gt;
    &lt;PropertyGroup&gt;
      &lt;NuGetAutofacManifest&gt;$(Root)build\temp\WindowsPhoneMVC.Extensions.AutofacIntegration.nuspec&lt;/NuGetAutofacManifest&gt;
      &lt;MainNuGetContent&gt;$(Root)build\temp\NuGet\content\&lt;/MainNuGetContent&gt;
    &lt;/PropertyGroup&gt;

    &lt;MakeDir Directories="$(Root)build\temp\NuGet\WindowsPhoneMVC.Extensions.AutofacIntegration\lib" /&gt;
    &lt;Copy SourceFiles="$(Root)build\WindowsPhoneMVC.Extensions.AutofacIntegration.nuspec"
              DestinationFiles="$(NuGetAutofacManifest)" /&gt;

    &lt;FileUpdate Files="$(NuGetAutofacManifest)"
                    Regex="0.0.0.1"
                    ReplacementText="$(Major).$(Minor).$(Build).$(Revision)"/&gt;

    &lt;Copy SourceFiles="$(ContentSource)To_Enable_Autofac.txt" DestinationFolder="$(MainNuGetContent)" /&gt;
    &lt;Copy SourceFiles="$(ContentSource)ApplicationModule.cs" DestinationFolder="$(MainNuGetContent)" /&gt;

    &lt;ItemGroup&gt;
      &lt;AutofacContentFiles Include="$(MainNuGetContent)\**\*.*" /&gt;
    &lt;/ItemGroup&gt;
    &lt;FileUpdate Files="@(AutofacContentFiles)"
                    Regex="NuGetContentSource"
                    ReplacementText="$rootnamespace$"/&gt;
    &lt;Move SourceFiles="@(AutofacContentFiles)"
              DestinationFiles="@(AutofacContentFiles-&gt;'$(MainNuGetContent)%(RecursiveDir)%(Filename)%(Extension).pp')" /&gt;

    &lt;!--SL3--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC.Extensions.AutofacIntegration\bin\Build\WindowsPhoneMVC.Extensions.AutofacIntegration.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL3-WP\WindowsPhoneMVC.Extensions.AutofacIntegration.dll"/&gt;
    &lt;!--SL4--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC.Extensions.AutofacIntegration\bin\Build\WindowsPhoneMVC.Extensions.AutofacIntegration.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone\WindowsPhoneMVC.Extensions.AutofacIntegration.dll"/&gt;
    &lt;!--SL4_71--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC.Extensions.AutofacIntegration\bin\Build_71\WindowsPhoneMVC.Extensions.AutofacIntegration.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone71\WindowsPhoneMVC.Extensions.AutofacIntegration.dll"/&gt;
    &lt;Exec Command='"$(NuGet)" pack "$(NuGetAutofacManifest)" -BasePath "$(Root)build\temp\NuGet" -OutputDirectory "$(Root)build\artifacts"' /&gt;
    &lt;RemoveDir Directories="build\temp\" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="TransitionsNuGet"&gt;
    &lt;PropertyGroup&gt;
      &lt;NuGetTransitionsManifest&gt;$(Root)build\temp\WindowsPhoneMVC.Extensions.Transitions.nuspec&lt;/NuGetTransitionsManifest&gt;
      &lt;MainNuGetContent&gt;$(Root)build\temp\NuGet\content\&lt;/MainNuGetContent&gt;
    &lt;/PropertyGroup&gt;

    &lt;MakeDir Directories="$(Root)build\temp\NuGet\WindowsPhoneMVC.Extensions.Transitions\lib" /&gt;
    &lt;Copy SourceFiles="$(Root)build\WindowsPhoneMVC.Extensions.Transitions.nuspec"
              DestinationFiles="$(NuGetTransitionsManifest)" /&gt;

    &lt;FileUpdate Files="$(NuGetTransitionsManifest)"
                    Regex="0.0.0.1"
                    ReplacementText="$(Major).$(Minor).$(Build).$(Revision)"/&gt;

    &lt;Copy SourceFiles="$(ContentSource)To_Enable_Transitions.txt" DestinationFolder="$(MainNuGetContent)" /&gt;

    &lt;ItemGroup&gt;
      &lt;TransitionsContentFiles Include="$(MainNuGetContent)\**\*.*" /&gt;
    &lt;/ItemGroup&gt;
    &lt;FileUpdate Files="@(TransitionsContentFiles)"
                    Regex="NuGetContentSource"
                    ReplacementText="$rootnamespace$"/&gt;
    &lt;Move SourceFiles="@(TransitionsContentFiles)"
              DestinationFiles="@(TransitionsContentFiles-&gt;'$(MainNuGetContent)\%(RecursiveDir)%(Filename)%(Extension).pp')" /&gt;

    &lt;!--SL3--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC.Extensions.Transitions\bin\Build\WindowsPhoneMVC.Extensions.Transitions.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL3-WP\WindowsPhoneMVC.Extensions.Transitions.dll"/&gt;
    &lt;!--SL4--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC.Extensions.Transitions\bin\Build\WindowsPhoneMVC.Extensions.Transitions.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone\WindowsPhoneMVC.Extensions.Transitions.dll"/&gt;
    &lt;!--SL4_71--&gt;
    &lt;Copy SourceFiles="$(Root)src\WindowsPhoneMVC.Extensions.Transitions\bin\Build_71\WindowsPhoneMVC.Extensions.Transitions.dll"
              DestinationFiles="$(Root)build\temp\NuGet\lib\SL4-WindowsPhone71\WindowsPhoneMVC.Extensions.Transitions.dll"/&gt;
    &lt;Exec Command='"$(NuGet)" pack "$(NuGetTransitionsManifest)" -BasePath "$(Root)build\temp\NuGet" -OutputDirectory "$(Root)build\artifacts"' /&gt;
    &lt;RemoveDir Directories="build\temp\" /&gt;
  &lt;/Target&gt;

  &lt;Target Name="Test" DependsOnTargets="NuGet"&gt;

  &lt;/Target&gt;

  &lt;Target Name="Package" DependsOnTargets="Test"&gt;
    &lt;Copy SourceFiles="$(Root)src\Templates\WPMvcTemplatesExtension\bin\Build\WindowsPhoneMvcTemplatesExtension.vsix"
              DestinationFiles="$(Root)build\artifacts\WindowsPhoneMvcTemplates.vsix" /&gt;
  &lt;/Target&gt;
&lt;/Project&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone MVC Update]]></title>
    <link href="http://jake.ginnivan.net/windows-phone-mvc-update/"/>
    <updated>2011-08-21T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/windows-phone-mvc-update</id>
    <content type="html"><![CDATA[<h1>Windows Phone MVC?</h1>

<p>So to get started, let me explain what it is.<br/>
It is a MVC + MVVM Hybrid framework, I think MVVM falls down in a few area&rsquo;s, and by teaming up with the MVC pattern we can achieve great testability, performance, navigation, lifecycle etc..</p>

<p>The aim of Windows Phone MVC is to make windows phone development quicker, easier, more enjoyable and most of all help you build a nice performant app which gives an awesome user experience.</p>

<p>This is going to be quite a long post going through many features of Windows Phone MVC, I hope it gets across what I am trying to do with the framework, and how it can help you out!<br/>
I am still a little way from v1, so there will be API changes, but I am more than happy to field some questions about how to use it.</p>

<p>Many of the improvements on this release are due to <a href="http://transhub.wordpress.com/">http://transhub.wordpress.com/</a> using Windows Phone MVC and I have been working close with the transub team to make sure the framework helped them deliver a killer app!</p>

<!-- more -->


<h2>Important Links</h2>

<p>NuGet Package Name: <a href="http://nuget.org/List/Search?packageType=Packages&amp;searchTerm=WindowsPhoneMVC">WindowsPhoneMVC</a><br/>
Codeplex URL: <a href="http://windowsphonemvc.codeplex.com/">http://windowsphonemvc.codeplex.com/</a><br/>
Documentation: <a href="http://windowsphonefoundations.net/windowsphonemvc">http://windowsphonefoundations.net/windowsphonemvc</a></p>

<h2>MVC</h2>

<p>First off it is important to understand how a MVC framework works.</p>

<p>It all starts off with a Controller, and an Action.</p>

<pre><code>public class HomeController : Controller
{
    public ActionResult Main()
    {
        return Page(new MainViewModel());
    }
}
</code></pre>

<p>An <strong>action</strong> is simply a method on a class which inherits from Controller. The Controller returns an ActionResult, there are helper methods in the controller base class which let you do this with ease.</p>

<p><strong>Note:</strong> is actions are invoked on a <code>background thread</code> and you should do work synchronously, we have made this easy with:</p>

<pre><code>public ActionResult GetWebData()
{
    var request = WebRequest.CreateHttp(url);
    var response = (HttpWebResponse)Execute.AsyncPatternWithResult(request.BeginGetResponse, request.EndGetResponse);
    return Result(response.GetResponseString());
}
</code></pre>

<p>Will talk a bit more about threading later..</p>

<h3>ActionResults</h3>

<p>We have a few different action results, they include:</p>

<ul>
<li>PageResult (Navigates to a new page, the parameter you pass becomes the datacontext for that page)</li>
<li>DialogResult (Shows a dialog over the top of your current page)</li>
<li>NothingResult (Allows you to finish a controller action without doing anything. i.e if (TrialExpired) <code>return Nothing();</code></li>
<li>BackResult (navigates back)</li>
<li>BackToResult (navigates back to a particular view. i.e to go back to home, no matter how many between <code>return BackTo&lt;HomeController&gt;("Main");</code>)</li>
<li>DataResult (used to return data to the previous view, more info below!)</li>
</ul>


<p>Using these, you can do most things you need to pretty easily.</p>

<h3>Invoking actions</h3>

<p>Generally you will invoke ALL actions from the viewmodel, currently all the API&rsquo;s are named around navigation, this may change in the future. What do you think?</p>

<pre><code>//MainViewModel ctor
public MainViewModel()
{
    SearchCommand = Controller&lt;SearchController&gt;.NavigationCommand(c=&gt;c.SearchLocations(SearchCriteria));
}

public SearchCriteria SearchCriteria { get { return searchCriteria; } }
public ICommand SearchCommand { get; private set; }
</code></pre>

<h2>Performance</h2>

<p>One of the first things that people say to me when I say I am building <em>another</em> framework for windows phone is, &lsquo;I don&rsquo;t use frameworks, they are too slow&rsquo;.<br/>
Something to keep in mind is that there are two types of performance, actual performance and perceived performance. The latter is actually the more important of the two, because it is how the user perceives how fast the application is.
I remember reading in a book the story about how back in the day Microsoft got told that their c++ compiler was slow vs the borland one, even though it WAS faster, so they then made it output everything that it was happening onto the console and the users congratulated them on the improvement. It was about 5% slower because of the output.</p>

<p>Windows Phone MVC tries to achieve both by default, I am trying to optimise the framework as much as I can, the overhead in startup time &amp; memory usages is 15-20% at the moment based on some initial testing, I hope to drop this over time and put some neat perf tricks in.</p>

<p><img src="/assets/posts/2011-08-21-windows-phone-mvc-update/ProgressBar.png" alt="Progress Screen" /></p>

<p>There is a few things to note here, Windows Phone MVC has a rich navigation system, so you can do work, load data, THEN navigate. You can also invoke an action which simply returns you data, or navigates to a page, then returns you the result from that page!</p>

<ol>
<li>Performance Progress Bar included out of the box (original, if you add transitions extension which needs Silverlight Toolkit, we switch to using the new one from Silverlight Toolkit).</li>
<li>As soon as you invoke any action the Progress bar will be shown, and the screen grayed. You can also easily show text by just going <code>LoadingMessage("Search in progress..");</code> from your controller action.</li>
<li>The app bar buttons are all disabled (we also give you full Commanding support in the app bar! more info on that later).</li>
</ol>


<p>I still have some tuning and plan on rounding up some WP7 performance experts at TechEd to give me more tips about how I can improve the performance of this, but it feels and looks nice at the moment.</p>

<h2>MVVM/Commanding Support</h2>

<p>Out of the box there are some really nice helpers for you.</p>

<h3>Buttons</h3>

<pre><code>&lt;Button commands:Click.Command="{Binding AboutPageCommand}"
        Content="About" /&gt;
&lt;Button commands:Navigate.To="Home.ViewItem"
        DataContext="{Binding }" &lt;!--Action can be ViewItem(ItemViewModel item)--&gt;
        Content="View Item" /&gt;
</code></pre>

<p>The second can optionally pass the datacontext to the controller action, really useful when you have a button in a list of items.</p>

<h3>App Bar</h3>

<p>As you probably know, the Application Bar is not a DependencyObject, so we can&rsquo;t use any of the nice silverlight goodness we are used to. I have taken the following approach:</p>

<pre><code>&lt;phone:PhoneApplicationPage.ApplicationBar&gt;
    &lt;shell:ApplicationBar IsVisible="True"
                          IsMenuEnabled="True"&gt;
        &lt;shell:ApplicationBarIconButton IconUri="/Icons/dark/appbar.add.rest.png"
                                        Text="new[AddCommand]" /&gt;
        &lt;shell:ApplicationBar.MenuItems&gt;
            &lt;shell:ApplicationBarMenuItem Text="settings[ShowSettingsPageCommand]" /&gt;
            &lt;shell:ApplicationBarMenuItem Text="about[ShowAboutPageCommand]" /&gt;
        &lt;/shell:ApplicationBar.MenuItems&gt;
    &lt;/shell:ApplicationBar&gt;
&lt;/phone:PhoneApplicationPage.ApplicationBar&gt;
</code></pre>

<p>Simply put the command name in square brackets in your appbar text, and they will be wired up to your viewmodel. Including listening to CanExecuteChanged to enable and disable appbar buttons!</p>

<h3>ListBoxes</h3>

<p>Another handy addition is if you have a list of items, and you want to view details when any one of them is selected.</p>

<pre><code>&lt;ListBox ItemsSource="{Binding Items}"
            Commands:Navigate.OnItemSelected="AnotherController.ItemAction"
            DisplayMemberPath="Title" /&gt;
</code></pre>

<h3>On the ViewModel</h3>

<p>How often do you write something like <code>new DelegateCommand(()=&gt;DoStuff())</code> in the case of MVC it would be <code>new DelegateCommand(()=&gt;Controller&lt;HomeController&gt;().DoStuff())</code>. That is kinda ugly, so I have provided a nicer API for defining Commands:</p>

<pre><code>ShowGreetingPageCommand = Controller&lt;HomeController&gt;().NavigationCommand(c =&gt; c.SayHelloTo(Name));
//or if you want to fetch some data/refresh the page: 
RefreshCommand = Controller&lt;AnotherController&gt;().NavigationCommandWithResult&lt;ObservableCollection&lt;SearchResult&gt;&gt;(c =&gt; c.PerformSearch(Parameter), HandleCallback);
</code></pre>

<h2>Navigation</h2>

<p>I mentioned earlier that Windows Phone MVC has a really powerful navigation system. It actually does not use the inbuild NavigationService, it navigates once at the start of the all to your <code>Shell.xaml</code>, which hosts your app, the framework then takes care of switching out the content, and maintaining it&rsquo;s own journal. This has a number of advantages.</p>

<p>Be aware that Navigation with Windows Phone MVC is equivilent to Tombstoning that view, when you navigate the controller action will ALWAYS be executed. The advantage of this is that your views/viewmodels can be garbage collected as soon as you navigate away from that view.</p>

<h3>Type safe navigation WITH arguments</h3>

<p>Take this navigation:</p>

<pre><code>Controller&lt;HomeController&gt;().NavigateTo(c =&gt; c.MyAction(ComplexProperty)); 
</code></pre>

<p>This is all type safe, and I am passing any class as an argument to my action, I don&rsquo;t need to know the view name, and I get full intellisense on the arguments.</p>

<p><strong>NOTE:</strong> Due to WP7 limitations around reflection, you cannot pass local variables (declare in the same method), method arguments, or protected/private fields. All of these things require reflection on non public types, which is not supported. <br/>
Never fear!</p>

<p>If you try and do this:</p>

<pre><code>private void NavigateWithPrivate()
{
    var local = new SomeClass();
    Controller&lt;AnotherController&gt;().NavigateTo(c=&gt;c.PerformSearch(local));
}
</code></pre>

<p>You will get a nice helpful error message:</p>

<p><img src="/assets/posts/2011-08-21-windows-phone-mvc-update/NavNotSupported.png" alt="Useful exception message" /></p>

<p>You can literally copy and paste the suggested syntax (check it first, and let me know if I get any cases wrong) over your code, then it will start working!</p>

<h3>Back stack manipulation (without Mango :P)</h3>

<p>At any time in a viewmodel or a controller you can write:</p>

<pre><code>Navigator.RemoveBackEntry();
</code></pre>

<p>That is pretty cool, and works without mango. But to go one better than what you get in Mango:</p>

<pre><code>Navigator.NavigateBackTo&lt;HomeController&gt;("Main");
// or in controller:
return BackTo&lt;HomeController&gt;("Main");
</code></pre>

<p>This will unwind the backstack until you get to the matching controller and action! If it can&rsquo;t find it, it will let you know.</p>

<h3>Returning data to previous page</h3>

<p>A great example of this is the DateTimePicker in the toolkit, when you click on it, it actually hijacks the navigation service, navigates to a page inside the toolkit, then when you click on one of the appbar buttons it navigates back, then updates the control. Sound useful? It really is..</p>

<h4>Without a navigation</h4>

<p>This performs a search in a controller action, then returns the data without navigating.</p>

<pre><code>private void PerformSearch()
{
    Controller&lt;SearchController&gt;().NavigateToWithResult&lt;JourneyPlanningResponse&gt;(c =&gt; c.PerformSearch(SearchCriteria), SearchComplete);
}

private void SearchComplete(JourneyPlanningResponse response)
{
     ....
}
</code></pre>

<h4>With navigation</h4>

<p>What about the datepicker example:</p>

<pre><code>GetValueCommand = Controller&lt;DebugController&gt;().NavigationCommandWithResult&lt;string&gt;(c =&gt; c.PageWithResult(), HandleCallback);
</code></pre>

<p>Then on our viewmodel looks like this:</p>

<pre><code>public class PageWithResultViewModel : ViewModelBase
{
    private string valueToReturn;

    public PageWithResultViewModel()
    {
        OkCommand = new DelegateCommand(() =&gt; Navigator.NavigationResult(ValueToReturn));
        CancelCommand = new DelegateCommand(() =&gt; Navigator.NavigateBack());
    }

    public string ValueToReturn
    {
        get { return valueToReturn; }
        set
        {
            valueToReturn = value;
            OnPropertyChanged(()=&gt;ValueToReturn);
        }
    }

    public ICommand OkCommand { get; private set; }
    public ICommand CancelCommand { get; private set; }
}
</code></pre>

<p>I recon that is pretty cool! And super easy to use&hellip;.</p>

<h2>Threading</h2>

<p>Mentioned earlier, actions are invoked on a background thread, and the Controller&rsquo;s lifetime scope (if using autofac) is disposed as soon as the action is invoked, so you shouldn&rsquo;t <code>return</code> from the  action before you have fully setup the new view&rsquo;s viewmodel and you shouldn&rsquo;t be waiting for any callbacks. The way we have solved this is with the <code>Execute</code> class.</p>

<pre><code>var response = (HttpWebResponse)Execute.AsyncPatternWithResult(svc.BeginGetResponse, someArg, request.EndGetResponse);
</code></pre>

<p>   //or if the call doesnt return anything
   Execute.AsyncPattern(svc.BeginDoSomething, someArg, svc.EndDoSomething);</p>

<p>This will turn the async pattern Begin/End pair into a synchronous call. You should not use this class on the UI Thread obviously&hellip;</p>

<p>Talking about the UI Thread, what happens if you want to do stuff on the UI Thread?</p>

<pre><code>Execute.OnUIThread(()=&gt;{/*dostuff*/});
Execute.OnUIThreadSync(()=&gt;{/*do stuff synchronously*/});
</code></pre>

<p>These two methods invoke an action(or func<T> with the synchronous option) on the UI Thread asynchronously and synchronously respectively.</p>

<h2>WP7 Lifecycle</h2>

<p>Another very important part of developing for WP7 is the lifecycle management. We do a fair bit here to help you out.</p>

<p>If you want a property to be saved between navigations, and tomb-stoning simply mark it as transient like follows:</p>

<pre><code>public RegisterViewModel()
{
    Transient(() =&gt; Name);
    Transient(() =&gt; Username);
    Transient(() =&gt; Password);
}
</code></pre>

<p>Because we recreate the view each time you navigate (I may possibly introduce caching of the view so it doesn&rsquo;t have to be recreated, but memory pressure is tight pre-mango so will investigate in the future), Panoramas will not restore to the same panel that was selected. This is easily fixed with an attached property</p>

<pre><code>&lt;toolkit:Panorama Title="my application"
                  Phone:Restore.PanoramaPosition="True"&gt;
</code></pre>

<p>Let me know if there any other things that you would like restored.</p>

<h3>OnActivate/OnDeactivate</h3>

<p>Windows Phone MVC changes the behaviour slightly from the default experience. When a view is navigated away from, OnDeactivate will be called, and whenever it is shown OnActivate will be executed. Simply override one/both of these methods to do anything you need to for tombstoning.</p>

<h3>PageState</h3>

<p>Earlier I mentioned that Windows Phone MVC has it&rsquo;s own NavigationService, and Journal. This means I cannot use the included PageState from the framework as it is tightly coupled with the phones NavigationService. So I have rolled my own.</p>

<pre><code>public interface IPageTransientStore
{
    void Save&lt;T&gt;(string key, T obj) where T : class;
    T Load&lt;T&gt;(string key) where T : class;
    bool Contains(string key);
    void Remove(string key);
}
</code></pre>

<p>All serialisation in Windows Phone MVC is done using Mike Talbot&rsquo;s <a href="http://whydoidoit.com/silverlight-serializer/">Silverlight Serializer</a>. This means I can serialise complex types, without specifying known types very fast.</p>

<h3>Obscured</h3>

<p>If you are interested in being notified when your app is obscured, simple make your ViewModel inherit from <code>IObscuredAware</code>, like so:</p>

<pre><code>public class ViewResultTestViewModel : ViewModelBase, IObscuredAware
{
    public void Unobscured(object sender, EventArgs e)
    {
    }

    public void Obscured(object sender, ObscuredEventArgs e)
    {
    }
}
</code></pre>

<h2>Deep Linking</h2>

<p>We also support Mango features! If you want to create a deep link into your Windows Phone MVC application, that is really easy too.. It is also type safe =)</p>

<pre><code>private void CreateDeepLink()
{
    var deepLinkUri = Controller&lt;HomeController&gt;().UriFor(c =&gt; c.DeepLinkPage, new Dictionary&lt;string, string&gt;());
    ShellTile.Create(new Uri(deepLinkUri, UriKind.Relative), new StandardTileData
                                                {
                                                    BackgroundImage = new Uri("/ApplicationIcon.png", UriKind.Relative),
                                                    Title = "MVC Deep Link"
                                                });
}
</code></pre>

<p>Deep links can only take a collection of KeyValuePair&lt;string, string> for the parameters.</p>

<h2>Transitions</h2>

<p>Everyone loves a nice sexy app that has transitions. Jeff and the guys behind the Silverlight have made it pretty easy to get nice transitions working in your app. You will be happy to know it is just as easy for Windows Phone MVC. Simple run in your NuGet console <code>Install-Package WindowsPhoneMVC.Extensions.Transitions</code>. This relies on the Silverlight toolkit and will drop a <code>To_Enable_Transitions.txt</code> file into your project with the code required to wire it up (super easy).
The usage is exactly the same after the setup.</p>

<h2>IoC Container Support</h2>

<p>By default, Windows Phone MVC has a DefaultControllerFactory, this isn&rsquo;t very interesting. So you can just run this in your NuGet console <code>Install-Package WindowsPhoneMVC.Extensions.AutofacIntegration</code> and you will get two files and a reference added to your project, the first is <code>To_Enable_Autofac.txt</code>, it will have code in it which you can copy/paste into App.xaml to enable the integration. The next is <code>ApplicationModule.cs</code> which is where you can register everything.</p>

<h3>Performance</h3>

<p>Once again, as soon as you mention an IoC container on the phone, people freak out. The performance penalty is next to nothing if you do a bit of work in your ApplicationModule class.</p>

<p>Use Register(()=>) rather than RegisterType. Out of the box (so it works by default) you have this in your ApplicationModule.</p>

<pre><code>builder
    .RegisterAssemblyTypes(Assembly.GetExecutingAssembly())
    .AssignableTo&lt;Controller&gt;()
    .AsSelf();
</code></pre>

<p>This has the cost of reflecting your assembly when starting your app, then the reflection cost of construcing the object. A more performant alternative is:</p>

<pre><code>builder
    .Register(c=&gt;new MainController(c.Resolve&lt;ISomeService&gt;()))
    .AsSelf();
builder
    .Register(c=&gt;new SomeService())
    .As&lt;ISomeService&gt;()
    .SingleInstance(); //Lightweight services can be left as SingleInstance
</code></pre>

<p>Sure this has more maintenance costs, but the performance different is substantial. On my phone the a object graph of ~90 object constructions took about 30% of the time vs letting the container do the hard work.</p>

<h2>Debugging</h2>

<p>To make diagnosing issues, and to give warnings and suggestions, simply handle the Trace event on the NavigationApplication and write the message out to Debug.Write. Internally no logging will be executed if the debugger is not attached.</p>

<pre><code>&lt;Application.ApplicationLifetimeObjects&gt;
    &lt;AutofacIntegration:AutofacNavigationApplication Activated="AutofacNavigationApplicationActivated"
                                                     Deactivated="AutofacNavigationApplicationDeactivated"
                                                     Closing="NavigationApplication_OnClosing"
                                                     Trace="AutofacNavigationApplication_Trace"/&gt;
&lt;/Application.ApplicationLifetimeObjects&gt;
</code></pre>

<p>In the HelloWorld application this produces an output like this:</p>

<pre><code>Navigator: Memory usage before navigation: 8.359375
Navigator: Memory usage after navigation: 9.42578125
Navigator: Memory usage before navigation: 9.46484375
Navigator: Memory usage after navigation: 15.55859375
Navigator: Memory usage before navigation: 13.84765625
Navigator: Passing ViewModels as parameters may cause memory pressure as they are not disposed! Consider using base type of NotifyPropertyChanged if the parameter is actually an entity, not a ViewModel.
Navigator: Memory usage after navigation: 19.08203125
Navigator: Memory usage before navigation: 11.46875
Navigator: Memory usage after navigation: 12.62890625
Navigator: Memory usage before navigation: 11.828125
Navigator: Memory usage after navigation: 16.98828125
TimerScope: Beginning Parsing Navigation Expression
Navigator: Memory usage before navigation: 15.3203125
TimerScope: Ending Parsing Navigation Expression. Took 13ms
Navigator: Memory usage after navigation: 19.84765625
</code></pre>

<p>Logging is pretty light at the moment, as I try and identify performance bottlenecks and other things I will likely introduce logging levels and lots more of it. I also hope to add helpful warnings for best practices as I have done with the note about ViewModels.</p>

<p>The downside of such a rich navigation model, is that you can pass very large things around, and parameters are always kept in memory, and viewmodels often have a lot more data than actually needs to be kept in memory.</p>

<h1>Conclusion</h1>

<p>I hope this is a useful post as a introduction to Windows Phone MVC, and shows off many of the features which make it really easy to write WP7 applications.</p>

<p>Please leave feedback, ping me on twitter (@JakeGinnivan), or email me at <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#106;&#97;&#107;&#x65;&#x40;&#103;&#x69;&#110;&#110;&#105;&#118;&#x61;&#110;&#46;&#x6e;&#x65;&#116;">&#106;&#97;&#x6b;&#101;&#64;&#x67;&#x69;&#110;&#x6e;&#x69;&#x76;&#97;&#x6e;&#46;&#110;&#x65;&#116;</a> with suggestions/issues. I want to power towards v1.0 when I will lock down API&rsquo;s and consider the framework stable. The framework is reasonably stable now, and is being used in a decent size app. But there will likely be situations I haven&rsquo;t thought of, or haven&rsquo;t tested.</p>

<h1>Go get it!</h1>

<p>Simply add <code>WindowsPhoneMVC</code> to your project via NuGet to get started, there will be a readme added to your project and a sample controller/ViewModels etc. If you don&rsquo;t want the files to get you started, choose the libs project</p>
]]></content>
  </entry>
  
</feed>
