<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TestStack | Jake Ginnivan's blog]]></title>
  <link href="http://jake.ginnivan.net/blog/categories/teststack/atom.xml" rel="self"/>
  <link href="http://jake.ginnivan.net/"/>
  <updated>2014-06-11T03:45:17+08:00</updated>
  <id>http://jake.ginnivan.net/</id>
  <author>
    <name><![CDATA[Jake Ginnivan]]></name>
    <email><![CDATA[jake@ginnivan.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Convention Tests v2 Released]]></title>
    <link href="http://jake.ginnivan.net/conventiontests-v2-released/"/>
    <updated>2013-09-19T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/conventiontests-v2-released</id>
    <content type="html"><![CDATA[<h2>ConventionTests v2 Released</h2>

<p><a href="https://github.com/kkozmic">Krzysztof Ko≈∫mic</a> first spoke about ConventionTests at NDC 2012. You can find the video of that talk <a href="http://vimeo.com/43676874">here</a>, slides <a href="http://kozmic.pl/presentations/">here</a> and the introductory blog post <a href="http://kozmic.pl/2012/06/14/using-conventiontests/">here</a>.</p>

<p>In v2, we have rewritten convention tests from the ground up to make it easier to get started, bundle some default conventions and also decouple it from a specific unit testing framework.</p>

<p>There is still plenty we can make better, so please raise issues on github with suggestions!</p>

<h2>What is ConventionTests?</h2>

<p>Convention over Configuration is a great way to cut down repetitive boilerplate code. But how do you validate that your code adheres to your conventions? Convention Tests is a code-only NuGet that provides a simple API to build validation rules for convention validation tests.</p>

<!-- more -->


<h2>Getting Started</h2>

<p>It is really easy to get started with Convention Tests, we have included a bunch of conventions out of the box. The included conventions are:</p>

<ul>
<li>All Classes Have Default Constructor</li>
<li>All Methods are Virtual</li>
<li>Class type has specific namespace (for example, all dtos must live in the ProjectName.Dtos namespace)</li>
<li>Files are Embedded Resources</li>
<li>Project does not reference dlls from Bin or Obj directory</li>
<li>Plus others will be added!</li>
</ul>


<h3>Writing your first Convention test</h3>

<h4>1. Using your favourite testing framework, create a new test. Lets call it <code>nhibernate_entities_must_have_default_constructor</code></h4>

<h4>2. Define some data</h4>

<p>At the moment there is minimal support for type scanning, but better support will be added soon!</p>

<pre><code>var itemsToVerify = typeof (SampleDomainClass).Assembly.GetTypes();
var nhibernateEntities = new Types("nHibernate Entitites")
{
    TypesToVerify = itemsToVerify
};
</code></pre>

<h4>3. Assert the convention</h4>

<p><code>Convention.Is(new AllClassesHaveDefaultConstructor(), nhibernateEntities);</code></p>

<h4>That&rsquo;s it!</h4>

<p>When you run this convention, if it fails an exception will be thrown, which will look something like this:</p>

<pre><code>ConventionFailedException
Message = Failed: 'Types must have a default constructor' for 'nHibernate Entitites'
--------------------------------------------------------------------------

TestAssembly.ClassWithNoDefaultCtor
TestAssembly.ClassWithPrivateDefaultCtor
</code></pre>

<p>How cool is that!</p>

<h3>Reporting</h3>

<p>If you would like to use ConventionTests reporting features, you just have to opt in by specifying the reporter you want. This makes it easy to add your own reporters, for example a WikiReporter may be better than the <code>HtmlReporter</code></p>

<p>In your <code>Properties\AssemblyInfo.cs</code> file add the reporters you want. This are global reporters which will report the results of all conventions.</p>

<pre><code>[assembly: ConventionReporter(typeof(HtmlConventionResultsReporter))]
[assembly: ConventionReporter(typeof(MarkdownConventionResultsReporter))]
</code></pre>

<p>Then if you look in the directory where your test assembly is, there will be an html report called <code>Conventions.htm</code>, serving as living documentation!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TestStack.White v0.11 Released!]]></title>
    <link href="http://jake.ginnivan.net/teststack-white-v0-11/"/>
    <updated>2013-08-01T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/teststack-white-v0-11</id>
    <content type="html"><![CDATA[<p>I have just pushed the button for TestStack.White v0.11.</p>

<p>The main focus between v0.10 and v0.11 is converting the old test suite into a new test suite which is easier to maintain and can reliably run on the build server.</p>

<p>The previous test suite was often red, which meant that it was hard to know if there were regressions as other issues were fixed.</p>

<p>You can see the CI status at <a href="http://teamcity.ginnivan.net/project.html?projectId=TestStack_White&amp;branch_TestStack_White=__all_branches__">http://teamcity.ginnivan.net/project.html?projectId=TestStack_White</a></p>

<!-- more -->


<h2>TestStack.White.ScreenObjects</h2>

<p>Also released is <a href="https://www.nuget.org/packages/TestStack.White.ScreenObjects">https://www.nuget.org/packages/TestStack.White.ScreenObjects</a></p>

<p>This is the old White.Repository project, finally released on NuGet. Hopefully there should be some updates to this project coming up as well!</p>

<h2>Namespace Change</h2>

<p>Being part of TestStack now, we wanted to bring White&rsquo;s namespace into line with the other TestStack projects.</p>

<p>White&rsquo;s namespace has changed from <code>White.Core</code> to <code>TestStack.White</code>. Once you upgrade just run <code>Fix-WhiteNamespaces</code> from your NuGet console and we will fix all your namespace references for you!</p>

<h2>Change Log</h2>

<p>The change log is available at <a href="http://teststack.azurewebsites.net/White/ChangeLog.html">http://teststack.azurewebsites.net/White/ChangeLog.html</a></p>

<p>You may notice the website (which we will have a domain for very shortly), this is the new TestStack documentation site/wiki.</p>

<p>Please have a look around, post comments, contribute and give us feedback!</p>

<h2>Pull Requests</h2>

<p>Whenever you submit a pull request for White, we will automatically do a CI build, then a full UI Test run.
This means if you do not want to wait for the test suite to run on your machine, you can just submit your pull request, then wait for the status to be reported back (which sometimes fails for some reason, but you should be able to see it on the build server).</p>

<h2>Whats next</h2>

<p>The next step for White is upgrading to v3 of the UIA Library, this will likely break a few things (which is why it was important to get the tests running properly).</p>

<h2>Reporting Issues</h2>

<p>If you find an issue in White, create an issue on github, and even better, create a failing UI tests. I do not mind pull requests with a failing test, I can fix the underlying issue without you getting involved in the inner workings of White.</p>
]]></content>
  </entry>
  
</feed>
