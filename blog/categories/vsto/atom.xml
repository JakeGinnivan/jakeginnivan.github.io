<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: VSTO | Jake Ginnivan's blog]]></title>
  <link href="http://jake.ginnivan.net/blog/categories/vsto/atom.xml" rel="self"/>
  <link href="http://jake.ginnivan.net/"/>
  <updated>2014-05-14T20:41:15+01:00</updated>
  <id>http://jake.ginnivan.net/</id>
  <author>
    <name><![CDATA[Jake Ginnivan]]></name>
    <email><![CDATA[jake@ginnivan.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VSTO Contrib v0.12 Released]]></title>
    <link href="http://jake.ginnivan.net/vsto-contrib/v0-12-released/"/>
    <updated>2013-08-06T00:00:00+01:00</updated>
    <id>http://jake.ginnivan.net/vsto-contrib/v0-12-released</id>
    <content type="html"><![CDATA[<p>I have just pushed the button on VSTO Contrib v0.12!</p>

<p>This release is aimed at fixing a bunch of bugs, like some callbacks not working, creating a viewmodel instance for when no documents are open and supporting Office 2013!
Due to the complexities of supporting multiple versions, I have dropped Office 2007 support. Please let me know if this is a major issue, and I might try to add it back in next release.</p>

<p>I have also released a getting started video. This is one of the first screencasts I have done, so I will likely do it again next release. Also when you install VSTO Contrib, a readme will popup, this will help you get started.</p>

<object width="420" height="315"><param name="movie" value="//www.youtube.com/v/TxRjNsaVX6U?version=3&amp;hl=en_GB"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="//www.youtube.com/v/TxRjNsaVX6U?version=3&amp;hl=en_GB" type="application/x-shockwave-flash" width="420" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>


<p>I will try to produce some documentation/blog posts on VSTO Contrib over the next few weeks.</p>

<p>From now, I will be tracking changes/fixes a lot better. Please report any issues at <a href="https://github.com/JakeGinnivan/VSTOContrib/issues">https://github.com/JakeGinnivan/VSTOContrib/issues</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSTOContrib Context Menus]]></title>
    <link href="http://jake.ginnivan.net/vstocontrib-outlook-contextmenus/"/>
    <updated>2012-08-22T00:00:00+01:00</updated>
    <id>http://jake.ginnivan.net/vstocontrib-outlook-contextmenus</id>
    <content type="html"><![CDATA[<p>So the scenario was that I want to show additional menu items when right clicking on an email.</p>

<!-- more -->


<pre><code>&lt;contextMenus&gt;
  &lt;contextMenu idMso="ContextMenuMailItem"&gt;
    &lt;button id="MyContextMenuMailItem"
            label="Perform the action..."
            onAction="EmailItems"
            imageMso="Forward"/&gt;
  &lt;/contextMenu&gt;
  &lt;contextMenu idMso="ContextMenuMultipleItems"&gt;
    &lt;button id="MyContextMenuMultipleItems"
        label="Perform the action on multiple items..."
        onAction="EmailItems"
        imageMso="Forward"/&gt;
  &lt;/contextMenu&gt;
&lt;/contextMenus&gt;
</code></pre>

<p>In the current release, the EmailItems callback would never be called. This is because of the way Outlook handles selections and context menus. VSTOContrib now correctly routes the callbacks to the correct viewmodel.</p>

<p>Now you can simply add the callback to your viewmodel like this:</p>

<pre><code>[OutlookRibbonViewModel(OutlookRibbonType.OutlookExplorer)]
public class ExplorerViewModel : OfficeViewModelBase, IRibbonViewModel
{
    Folder context;
    Explorer explorer;

    public IRibbonUI RibbonUi { get; set; }
    public void Initialised(object context)
    {
        this.context = (Folder) context;
    }

    public void EmailItems(IRibbonControl control)
    {
        if (explorer.Selection.Count == 1)
        {
            var title = ((MailItem) explorer.Selection[1]).Subject;
        }
    }

    public void CurrentViewChanged(object currentView)
    {
        explorer = (Explorer) currentView;
    }

    public void Cleanup()
    {
    }
}
</code></pre>

<p>And you will get the EmailItems callback as you would expect. I also recommend putting a getVisible callback to hide the menu item if the selection does not contain mail items for instance.</p>

<p>Hope this helps someone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Sessions at TechEd 2011]]></title>
    <link href="http://jake.ginnivan.net/teched-2011/"/>
    <updated>2011-08-29T00:00:00+01:00</updated>
    <id>http://jake.ginnivan.net/teched-2011</id>
    <content type="html"><![CDATA[<h1>DEV304 - Adding Value to Software Projects with VSTO (Wed, 11:30am)</h1>

<p>This sessions will have something for everyone, if you have never used VSTO and are interested in it, I will be showing the value it has.
If you have used it, and hated it, I will also be showing how to improve your experience and give you a way of approaching the problems and some nice ways to improve the default experience. Part of this is a quick intro to COM Interop, how it works and how to make sure you avoid problems with it.
And finally, I will be showing a bit of VSTO contrib and how you can use IoC and other cool enhancements to the platform.</p>

<h1>WPH305 - Multi-Tasking and Application Services (Fri, 8:15am)</h1>

<p>In this session with Chris Walsh, we will be going through a whole lot of App services related features in Windows Phone Mango. We will cover things like Multi-Tasking, Background agents, Tiles, Notifications and Search extra&rsquo;s. We have some cool demo&rsquo;s and it will be a fun session.</p>

<h1>Demos</h1>

<p>I also have a few demo&rsquo;s lined up
 - Unit Testing with WP7 (1:30pm Wednesday)
 - Windows Phone MVC Intro (2:00pm Wednesday)</p>

<ul>
<li>Unit Testing with WP7 (1:00pm Wednesday)</li>
<li>Windows Phone MVC Intro (1:30pm Wednesday)</li>
</ul>


<p>If you attend, feedback is always welcomed and please submit your evals, it helps us as speakers a lot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ribbon XML and Ribbon Designer in Depth]]></title>
    <link href="http://jake.ginnivan.net/vsto-ribbon-designer-in-depth/"/>
    <updated>2011-04-05T00:00:00+01:00</updated>
    <id>http://jake.ginnivan.net/vsto-ribbon-designer-in-depth</id>
    <content type="html"><![CDATA[<p>Ever wanted to know a bit more about how VSTO gives you the Ribbon designer. This post will explain Ribbon XML, then how the designer gives you more.</p>

<!-- more -->


<h1>Ribbon Designer</h1>

<p>One of the goals when VSTO &lsquo;RAD&rsquo; or Rapid Application Development, where you get your draggy/droppy style of development. Which is exactly what the Ribbon designer gives you, a really simple, winforms like way of building up your ribbons. It gives you:</p>

<ul>
<li>Ability to easily target specific ribbon types, for example Microsoft.Outlook.Mail.Read or Microsoft.Excel.Workbook</li>
<li>Context of the Ribbon, which is the Document, or Inspector etc.</li>
<li>Familiar programming model, and IDE support. Simply handle click event through designer, it generates the callback. Super Simple.</li>
</ul>


<p>Which is great, the reason I have used it in the past is for the Context, Ribbon XML doesn&rsquo;t give you context, and it is really hard to get at the current context other than using the Globals.ThisAddIn.Application.ActiveExplorer properties.</p>

<h1>How Ribbons work in Office</h1>

<p>It all starts with <code>Microsoft.Office.Core.IRibbonExtensibility</code> this simple interface has a single method on it:<br/>
<code>string GetCustomUI(string RibbonID)</code></p>

<p>In your ThisAddIn.cs you can override the <code>CreateRibbonExtensibilityObject</code> method to provide a custom implementation of <code>IRibbonExtensibility</code>. By default it is the VSTO RibbonFactory.</p>

<p>When office starts up before any ribbon is displayed, it will call this method ONCE for each ribbon type. For example, when Outlook starts up it will call it passing <code>RibbonId = 'Microsoft.Outlook.Explorer'</code>, then when you open an email to read, it will be called again with <code>RibbonId = 'Microsoft.Outlook.Mail.Read'</code>.</p>

<p>Your job when implementing this interface, is to return the ribbon xml for the requested ribbon, and null if you don&rsquo;t have anything useful.</p>

<h1>Ribbon XML</h1>

<p>Ribbon XML itself is really simple, you define the ribbon structure through xml, it is quite logical and I have no issues as I write xaml all the time which is basically the same thing. This is what it looks like:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;customUI onLoad="Ribbon_Load" xmlns="http://schemas.microsoft.com/office/2006/01/customui"&gt;
    &lt;ribbon&gt;
        &lt;tabs&gt;
            &lt;tab idMso="TabAddIns"&gt;
                &lt;group id="group1" label="group1"&gt;
                    &lt;button id="button1" label="button1" showImage="false" /&gt;
                &lt;/group&gt;
            &lt;/tab&gt;
        &lt;/tabs&gt;
    &lt;/ribbon&gt;
&lt;/customUI&gt;
</code></pre>

<p>You can read more about the details of the format at <a href="http://msdn.microsoft.com/en-us/library/aa942866.aspx">http://msdn.microsoft.com/en-us/library/aa942866.aspx</a></p>

<h2>Callbacks</h2>

<p>This is where Ribbon XML becomes a bit ugly, if you have Ribbon XML for two different ribbons more, all callbacks must be on your IRibbonExtensibility class, which can make this a god object and the root of your entire application.</p>

<h1>How the Ribbon Designer works</h1>

<p>You might now be wondering, if you can only specify a ribbon extensibility class, and all callbacks must be on the same class, how can I have multiple ribbon designers in a single file?</p>

<p>Under the hood the Ribbon Designer is actually extremely complex. When you run your add-in a few things happen.</p>

<ol>
<li><p>The VSTO Ribbon Factory scans all assemblies for any classes implementing <code>Microsoft.Office.Tools.Ribbon.IRibbonExtension</code> (4.0) or <code>Microsoft.Office.Tools.Ribbon.OfficeRibbon</code> (3.5). This can be expensive for large add-ins, or add-ins that reference large assemblies.</p></li>
<li><p>As far as I can tell (based off spending some time in reflector), is that the RibbonFactory will reflect over each of your ribbons, then generate RibbonXML for your ribbon designer, this will be returned to Office when it requests that ribbon type.</p></li>
<li><p>When a new Context is created (new document, inspector etc) then the RibbonFactory will new up the appropriate ribbon designer class, and set the context for you.</p></li>
<li><p>When Office calls back to the RibbonFactory (for a button click etc.) then it will figure our which ribbon designer object the callback is for, then invoke the appropriate event.</p></li>
</ol>


<p>A bit of this is speculation, but working through this problem myself, it cannot be that far off the way things actually work.</p>

<p>Point 3 is the most interesting, and the one I had the most issues around when creating my Ribbon Factory for VSTO Contrib.</p>

<p>You can read about the <a href="vsto-contrib/ribbon-factory">VSTO Contrib Ribbon Factory</a> as well if you are interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSTO Contrib RibbonFactory]]></title>
    <link href="http://jake.ginnivan.net/vsto-contrib/ribbon-factory/"/>
    <updated>2011-04-05T00:00:00+01:00</updated>
    <id>http://jake.ginnivan.net/vsto-contrib/ribbon-factory</id>
    <content type="html"><![CDATA[<h1>Why?</h1>

<p>When I started creating a RibbonFactory, I hadn&rsquo;t actually looked into the way VSTO does it, I just wanted to use Ribbon XML, because it has more flexibility, but have a single class to represent a single ribbon and also support an IoC container, and DI for my ribbons.</p>

<p>Once I got that working, I started tweaking, improving, adding in context awareness and a view other things. Recently my reasons for trying to finish this have been:</p>

<ul>
<li>Lack of IoC/DI support in VSTO</li>
<li>Cost of brute force reflection when using ribbon designer</li>
<li>Wanting to use Ribbon XML over Ribbon Designer, but not really viable due to missing context for ribbon xml.</li>
<li>Ribbon XML having a single callback file</li>
<li>Making custom task panes, which are associated with a ribbon (i.e. button to show/hide custom task pane) really simple.</li>
</ul>


<p>The VSTO tooling is pretty good, especially around the designer, but I want the best of both worlds, and to be able to fall into <code>the pit of success</code> as <a href="http://www.paulstovell.com/">Paul Stovell</a> often says.</p>

<!-- more -->


<h1>View Model&rsquo;s in Office?</h1>

<p>I have broken all the differences between each of the Office applications up into terminology which is common to all of them, and abstracted the behaviours of each. The way I have broken it down is into</p>

<p><code>View</code> - This is the Outlook Explorer, Word Window, Appointment Inspector. Whatever the actual window is that is displaying something in office, this is the view.
<code>Context</code> - This is what the window is displaying, in word the Window is displaying a document, in PowerPoint that is a Presentation, in Outlook it is the Contact, or Appointment.
<code>ViewModel</code> - Your entry point into VSTO now is view models. You define a few model for a particular ribbon type, then whenever a new context is created which has that ribbon type, you get a new view model instance, with the context set. You will also be notified when the current active view changes (switching between two windows showing the same document).</p>

<h1>Show us the code</h1>

<p>You start off with the IRibbonViewModel interface which looks like:</p>

<pre><code>public interface IRibbonViewModel
{
    IRibbonUI RibbonUi { get; set; }
    void Initialised(object context);
    void CurrentViewChanged(object currentView);
    void Cleanup();
}
</code></pre>

<p><code>RibbonUi</code> will be set for you, this allows you to invalidate ribbon controls and activate different tabs on the ribbon.
<code>Initialised(object context)</code> will be called when the context is available, allowing you to hook into events, populate viewmodel data or anything you want. <code>CurrentViewChanged</code> and <code>Cleanup</code> are called when the current active window changes, or the context is closing respectively.</p>

<p>To get started all you have to do is create a class and make it inherit from IRibbonViewModel, then decorate it with the <code>RibbonViewModelAttribute</code>, which will look like this:</p>

<pre><code>[RibbonViewModel(OutlookRibbonType.OutlookContact)]
public class ContactFeed : OfficeViewModelBase, IRibbonViewModel, IRegisterCustomTaskPane
{

}
</code></pre>

<p>OfficeViewModelBase is a helper base class which inherits from INotifyPropertyChanged, and has helpers for raising property changed events with compile time safety.</p>

<p>The IRegisterCustomerTaskPane is the next interesting interface you have access to.</p>

<pre><code>public interface IRegisterCustomTaskPane
{
    void RegisterTaskPanes(Register register);
}

public delegate ICustomTaskPaneWrapper Register(Func&lt;UserControl&gt; controlFactory, string title);
</code></pre>

<p>An example implementation is:</p>

<pre><code>public void RegisterTaskPanes(Register register)
{
    _twitterTaskPane = register(() =&gt; new WpfPanelHost{Child = new TwitterFeed{DataContext = this}}, "Twitter");
    _twitterTaskPane.Visible = true;
    PanelShown = true;
    _twitterTaskPane.VisibleChanged += TwitterTaskPaneVisibleChanged;
    TwitterTaskPaneVisibleChanged(this, EventArgs.Empty);
}
</code></pre>

<p>Now the RibbonFactory will take care of registering the custom task pane when new views are opened, and keep properties synchronised across the same task panes on different views (visibility etc).</p>

<h1>How does it work?</h1>

<p>This was the hard part, it all sounds good in theory, but getting all the pieces together was a lot of hard work.</p>

<p>When <code>GetCustomIU(string RibbonId)</code> is called, the RibbonFactory finds a registered ViewModel for that ribbon type, it then fines the appropriate RibbonXml resource through the current <code>IViewLocator</code>, so you can specify your own conventions, by default it will look for a Resource with the same name, or try to match without view/viewmodel appended to the end of the names.</p>

<p>Once the RibbonXML has been found, the RibbonFactory rewrites all callbacks and caches them inside the <code>ViewModelResolver</code> class, it also generates a tag and inserts that into the control.</p>

<p><strong>Before:</strong><br/>
<code>&lt;toggleButton id="testTogglePanelButton" onAction="PanelShown" getPressed="PanelShown" label="Show Panel" showImage="false" /&gt;</code><br/>
<strong>After:</strong><br/>
<code>&lt;toggleButton id="testTogglePanelButton" onAction="PressedOnAction" getPressed="GetPressed" label="Show Panel" showImage="false" tag="RibbonType1testTogglePanelButton" /&gt;</code></p>

<p>The RibbonFactory has all known callback signatures defined, so when Office invokes one of the callbacks, it invoke a method on the RibbonFactory.<br/>
RibbonXml callbacks have the control that initiated the callback available, and the control has the associated context, so the RibbonFactory will grab the context, then ask the <code>ViewModelResolver</code> to locate the current active view for that context. It then uses the Tag to know what the original callback was, and it will invoke that callback for you.</p>

<p>Because it handles all the callbacks manually, it has no problems calling a Property getter or setter instead of a method. It also has quite nice error reporting when the viewmodel has the wrong method signature etc, unlike VSTO.</p>

<h1>Setup/Getting Started</h1>

<p>Getting started using the Ribbon Factory is quite easy, in your ThisAddIn.cs you have to override the <code>IRibbonExtensibility CreateRibbonExtensibilityObject()</code> and create a instance of the RibbonFactory for your office application. i.e OutlookRibbonFactory, WordRibbonFactory etc.</p>

<p>Then in the Internal Startup method you need to add the bootstrapping and initialisation code. The TwitterFeed demo project I have looks like this:</p>

<pre><code>public partial class ThisAddIn
{
    private AddinBootstrapper _core;

    private static void ThisAddInStartup(object sender, EventArgs e)
    {
        //WPF Support
        if (System.Windows.Application.Current == null)
            new Application { ShutdownMode = ShutdownMode.OnExplicitShutdown };
    }

    protected override IRibbonExtensibility CreateRibbonExtensibilityObject()
    {
        return new OutlookRibbonFactory(typeof(AddinBootstrapper).Assembly);
    }

    private void ThisAddInShutdown(object sender, EventArgs e)
    {
        _core.Dispose();
        System.Windows.Application.Current.Shutdown();
    }

    private void InternalStartup()
    {
        _core = new AddinBootstrapper();
        OutlookRibbonFactory.SetApplication(Application);
        RibbonFactory.Current.InitialiseFactory(
            t =&gt; (IRibbonViewModel)_core.Resolve(t),
            CustomTaskPanes);

        Startup += ThisAddInStartup;
        Shutdown += ThisAddInShutdown;
    }
}
</code></pre>

<h1>Summary</h1>

<p>The Ribbon Factory in VSTO Contrib I think is quite awesome, it gives a heap of features and makes VSTO development far easier. And it really complements the work the VSTO team has done around custom task panes. I will be exposing more VSTO related stuff as time goes by.</p>

<p>Now go grab the bits from <a href="http://vstocontrib.codeplex.com/releases">http://vstocontrib.codeplex.com/releases</a> (very soon, for now source =))</p>
]]></content>
  </entry>
  
</feed>
