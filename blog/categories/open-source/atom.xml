<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | Jake Ginnivan's blog]]></title>
  <link href="http://jake.ginnivan.net/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://jake.ginnivan.net/"/>
  <updated>2014-06-19T01:23:48+08:00</updated>
  <id>http://jake.ginnivan.net/</id>
  <author>
    <name><![CDATA[Jake Ginnivan]]></name>
    <email><![CDATA[jake@ginnivan.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReSharper Xaml Attribute Ordering Plug-in]]></title>
    <link href="http://jake.ginnivan.net/resharper-xaml-attribute-ordering-plugin/"/>
    <updated>2013-09-09T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/resharper-xaml-attribute-ordering-plugin</id>
    <content type="html"><![CDATA[<p>A while back I got introduced to <a href="https://xamlstyler.codeplex.com/">https://xamlstyler.codeplex.com/</a> which is a pretty good visual studio plug-in for formatting xaml, but I like ReSharper&rsquo;s formatting options better :)</p>

<p>So over the weekend I was at <a href="http://www.jetbrains.com/jetbrainsday/">JetBrains Day</a> in Malmo, and Matt Ellis did a talk on ReSharper extensions. I figured it would be a good time to try and write a plug-in.</p>

<p>Here are some screenshots</p>

<p><img src="/assets/posts/2013-09-09-resharper-xaml-attribute-ordering-plugin/Capture1.PNG" alt="Moar Xaml Code Cleanups" /></p>

<p><img src="/assets/posts/2013-09-09-resharper-xaml-attribute-ordering-plugin/Capture2.PNG" alt="Options" /></p>

<p>Now, I don&rsquo;t expect this to be super stable and I know of a few issues (like when you first format the Window tag is not quite formatted right), but I hope to setup a CI build and get some fixes out over the next week or so.</p>

<p>Check out the code, report issues and submit pull requests at <a href="https://github.com/JakeGinnivan/XamlAttributeOrderingCodeCleanup">https://github.com/JakeGinnivan/XamlAttributeOrderingCodeCleanup</a> and install from <a href="https://resharper-plugins.jetbrains.com/packages/JetBrains.ReSharper.Plugins.XamlAttributeOrdering/">ReSharper Extensions Site</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VSTO Contrib v0.12 Released]]></title>
    <link href="http://jake.ginnivan.net/vsto-contrib/v0-12-released/"/>
    <updated>2013-08-06T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/vsto-contrib/v0-12-released</id>
    <content type="html"><![CDATA[<p>I have just pushed the button on VSTO Contrib v0.12!</p>

<p>This release is aimed at fixing a bunch of bugs, like some callbacks not working, creating a viewmodel instance for when no documents are open and supporting Office 2013!
Due to the complexities of supporting multiple versions, I have dropped Office 2007 support. Please let me know if this is a major issue, and I might try to add it back in next release.</p>

<p>I have also released a getting started video. This is one of the first screencasts I have done, so I will likely do it again next release. Also when you install VSTO Contrib, a readme will popup, this will help you get started.</p>

<object width="420" height="315"><param name="movie" value="//www.youtube.com/v/TxRjNsaVX6U?version=3&amp;hl=en_GB"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="//www.youtube.com/v/TxRjNsaVX6U?version=3&amp;hl=en_GB" type="application/x-shockwave-flash" width="420" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>


<p>I will try to produce some documentation/blog posts on VSTO Contrib over the next few weeks.</p>

<p>From now, I will be tracking changes/fixes a lot better. Please report any issues at <a href="https://github.com/JakeGinnivan/VSTOContrib/issues">https://github.com/JakeGinnivan/VSTOContrib/issues</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documentation Site with Pretzel]]></title>
    <link href="http://jake.ginnivan.net/documentation-site-with-pretzel/"/>
    <updated>2013-07-27T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/documentation-site-with-pretzel</id>
    <content type="html"><![CDATA[<p>Over the last day or so, I have been setting up the documentation website for TestStack at <a href="http://teststack.azurewebsites.net/">http://teststack.azurewebsites.net/</a></p>

<p>With Pretzel&rsquo;s Wiki template support, it is super easy to get your own site setup.</p>

<!-- more -->


<h2>Create the site in pretzel</h2>

<p>This assumes you already have pretzel and it is in your PATH.</p>

<pre><code>C:\PretzelDemo&gt;pretzel.exe create -t=Razor --wiki --azure
</code></pre>

<p>There are a few things we are saying:
 - Create me a pretzel site
 - We are not specifying a directory, so pretzel will create the site in the current directory
 - We want our templating engine to be Razor, by default pretzel uses the Liquid templating engine (same as Jekyll)
 - The <em>&ndash;wiki</em> switch says we want a wiki template rather than the default blog setup
 - The <em>&ndash;azure</em> switch tells pretzel to create a solution which will bake our site when it is pushed to azure websites, this will move our site into a folder called _source</p>

<pre><code>C:\PretzelDemo&gt; pretzel.exe create -t=razor --wiki --azure
starting pretzel...
create - configure a new site
Using razor Engine
Pretzel site template has been created
Shim project added to allow deployment to azure websites
Press any key to continue...
</code></pre>

<p>A file you may be interested in is <code>_source\_layouts\layout.cshtml</code>, this file has all the logic for your Wiki, feel free to edit this, make improvements, style changes, structural changes. What pretzel gives you is just a starting point!</p>

<h2>The Wiki</h2>

<p>To view your wiki, run
<code>C:\PretzelDemo&gt; pretzel taste _source</code></p>

<p>This will fire up pretzel&rsquo;s web server, and launch your wiki.</p>

<p><img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument.png" alt="NewDocument" /></p>

<p>Lets create a few files</p>

<p><img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument1.png" alt="NewDocument1" /></p>

<p>Notice the items circled in blue are new files, each file we create must have what is called yaml front matter (circled in red).</p>

<p>Yaml front matter contains metadata about the file, like the title, permalink (a fixed url) and order among other things.</p>

<p>If you refresh your browser, you will get this</p>

<p><img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument2.png" alt="NewDocument2" /></p>

<p>Pretzel has detected changes to files in the site, then rebuilt our site for us.</p>

<h2>Deploying to Azure Wesbites</h2>

<p>Create the website
<img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument3.png" alt="NewDocument3" />
<img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument4.png" alt="NewDocument4" />
<img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument5.png" alt="NewDocument5" /></p>

<p>Now our site and deployment is setup, lets deploy. First copy the git deployment url
<img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument6.png" alt="NewDocument6" /></p>

<p>Now we head back to our powershell console and run the following commands:</p>

<pre><code>git init
"_site" | Out-File .gitignore
git add -A
git commit -m "Committed wiki"
git remote add azure &lt;deploymenturl&gt;
git push azure master
</code></pre>

<p>And that should deploy our site, if everything went well, you should have an output looking something like this</p>

<pre><code>C:\PretzelDemo [master]&gt; git push azure master
Counting objects: 33, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (29/29), done.
Writing objects: 100% (33/33), 716.65 KiB | 0 bytes/s, done.
Total 33 (delta 10), reused 0 (delta 0)
remote: Updating branch 'master'.
remote: Updating submodules.
remote: Preparing deployment for commit id '6476560e7e'.
remote: Generating deployment script.
remote: .
remote: info:    Executing command site deploymentscript
remote: info:    Solution file path: .\Shim.sln
remote: info:    The site directory path: .\_source\_site
remote: info:    Generating deployment script for .NET Web Site
remote: info:    Generated deployment script files
remote: info:    site deploymentscript command OK
remote: Running deployment command...
remote: Handling .NET Web Site deployment.
remote: C:\DWASFiles\Sites\pretzeldemo\VirtualDirectory0\site\repository\Shim.sln.metaproj : warning MSB4121: The project configuration for project "Sham" was not specified in the solution file for the solution configuration "Release|Any CPU". [C:\DWASFiles\Sites\pretzeldemo\VirtualDirectory0\site\repository\Shim.sln]
remote:   Shim -&gt; C:\DWASFiles\Sites\pretzeldemo\VirtualDirectory0\site\repository\bin\Release\Shim.dll
remote:   starting pretzel...
remote:   bake - transforming content into a website
remote:   Recommended engine for directory: 'razor'
remote:   done - took 2943ms
remote:   Press any key to continue...
remote: KuduSync.NET from: 'C:\DWASFiles\Sites\pretzeldemo\VirtualDirectory0\site\repository\_source\_site' to: 'C:\DWAS Files\Sites\pretzeldemo\VirtualDirectory0\site\wwwroot'
remote: Deleting file: 'hostingstart.html'
remote: Copying file: 'index.html'
remote: Copying file: 'MainTopic.html'
remote: Copying file: 'Topic.html'
remote: Copying file: 'topic2.html'
remote: Copying file: 'css\default.css'
remote: Copying file: 'css\style.css'
remote: Copying file: 'Feature\index - Copy.html'
remote: Copying file: 'Feature\index.html'
remote: Copying file: 'Feature\Topic - Copy.html'
remote: Copying file: 'Feature\Topic 2.html'
remote: Copying file: 'Feature\Topic.html'
remote: Copying file: 'img\favicon.ico'
remote: Finished successfully.
remote: Deployment successful.
To https://JakeGinnivan@pretzeldemo.scm.azurewebsites.net/pretzeldemo.git
 * [new branch]      master -&gt; master
</code></pre>

<p>Check the azure management console
<img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument8.png" alt="NewDocument8" /></p>

<p>Head to your website
<img src="/assets/posts/2013-07-27-documentation-site-with-pretzel/NewDocument7.png" alt="NewDocument7" /></p>

<p>Job done! You have a new wiki for documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing TestStack.White]]></title>
    <link href="http://jake.ginnivan.net/teststack-white/"/>
    <updated>2012-10-28T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/teststack-white</id>
    <content type="html"><![CDATA[<h1>Project White</h1>

<p>For those that don&rsquo;t know, project white has been around for ages. It has gone from Google Code (<a href="https://code.google.com/p/white-project/">https://code.google.com/p/white-project/</a>) to Codeplex (<a href="http://white.codeplex.com/">http://white.codeplex.com/</a>) then GitHub (<a href="https://github.com/petmongrels/white">https://github.com/petmongrels/white</a>).</p>

<p>The goal of White was to create a nice abstraction over Microsoft&rsquo;s UI Automation framework in a consistent and object orientated way.</p>

<p>White reached a nice maturity level and active development stopped about 2 years ago, since then things have moved on.</p>

<p><a href="https://github.com/petmongrels">Vivek Singh</a> has given me permission to take this project over and try and increase the activity on this project again.</p>

<h2>Why I&rsquo;m taking on White</h2>

<p>Personally, I have been on a rather large WPF project on and off for the past 2.5 years and rely on UI Automation very heavily. When we started the project, White was the most mature UI Automation framework.</p>

<p>This is a snapshot of some of our builds, every CI build that succeeds with kick-off many UI automation test runs for different configurations.<br/>
<img src="/assets/posts/2012-10-28-teststack-white/UIAutomationTests.png" alt="TeamCity" /></p>

<p>Over the last few years, we have wrapped White and have been running a custom builds and have learnt a lot about UI automation.</p>

<p>I would like to put some of the learnings and improvements back into White to make it easier for everyone to use UI automation without paying for one of the commercial offerings.</p>

<p>One of my colleagues at <a href="http://www.readify.net">Readify</a>, <a href="http://www.mehdi-khalili.com/">Mehdi Khalili</a> did a presentation at Perth .NET usergroup on UI Automation, he was suggesting many things that we were already doing on this project except he was focusing on Web Automation.
Mehdi created BBDify a while ago, which got renamed to BDDfy when Mehdi, <a href="https://github.com/mwhelan">Michael Whelan</a> and <a href="http://kozmic.pl/">Krzysztof Koźmic</a> formed <a href="http://teststack.github.com/">TestStack</a>.</p>

<p>After talking with Mehdi in the pub, he convinced me that I should restart White, and also join TestStack so we can keep some great testing related projects together!</p>

<h2>TestStack.White</h2>

<p>I have been doing some updates and cleanups on White over the past month or two in a private repo, but I have now opened it up at <a href="https://github.com/TestStack/White">https://github.com/TestStack/White</a>.</p>

<p>I am looking forward to working on White some more, and I welcome pull requests :P</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markpad Performance Push]]></title>
    <link href="http://jake.ginnivan.net/markpad-performance-push/"/>
    <updated>2012-08-12T00:00:00+08:00</updated>
    <id>http://jake.ginnivan.net/markpad-performance-push</id>
    <content type="html"><![CDATA[<p>If you haven&rsquo;t seen Markpad, think Windows Live Writer, but for Jekyll, Pretzel, FunnelWeb blogs, and also editing normal markdown files.</p>

<p><img src="/assets/posts/2012-08-12-markpad-performance-push/screenshot.png" alt="MarkPad" /></p>

<p>While flying back from Oslo and <a href="http://www.ndcoslo.com/">NDC</a> I spent probably 12+ hours of my ~20 hours of flying working on improving performance in MarkPad and cleaning up the codebase. This is documenting the most significant change.</p>

<!-- more -->


<h1>Hosting Awesomium in it&rsquo;s own AppDomain</h1>

<p>This was by far the biggest performance win for us, we moved Awesomium (the .net wrapper around the Chrome rendering engine) into it&rsquo;s own AppDomain, and show &lsquo;Preview Loading&hellip;&rsquo; much like visual studio does for it&rsquo;s designer.</p>

<p>Basically the way it works is we have a HtmlPreview.xaml control which is pretty simple:</p>

<pre><code>&lt;UserControl x:Class="MarkPad.PreviewControl.HtmlPreview"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Loaded="HtmlPreviewLoaded"&gt;
  &lt;UserControl.Effect&gt;
    &lt;DropShadowEffect BlurRadius="10"
                      Color="Black"
                      Opacity="0.25"
                      Direction="270" /&gt;
  &lt;/UserControl.Effect&gt;

  &lt;Border BorderThickness="0"
          Background="White"&gt;
    &lt;TextBlock Text="Preview loading..."
               HorizontalAlignment="Center"
               VerticalAlignment="Center" /&gt;
  &lt;/Border&gt;
&lt;/UserControl&gt;
</code></pre>

<p>The magic is inside the Loaded event of this control:</p>

<pre><code>private void HtmlPreviewLoaded(object sender, RoutedEventArgs e)
{
    Loaded -= HtmlPreviewLoaded;
    var context = TaskScheduler.FromCurrentSynchronizationContext();

    //We are hosting the Awesomium preview in another appdomain so our main UI thread does not take the hit
    hostAppDomain = AppDomain.CreateDomain("HtmlPreviewDomain");
    var filename = FileName;

    // create the AppDomain on a new thread as we want to ensure it is an 
    // STA thread as this makes life easier for creating UI components
    var thread = new Thread(() =&gt;
    {
        var awesomiumHostType = typeof(AwesomiumHost);
        host = (AwesomiumHost)hostAppDomain.CreateInstanceAndUnwrap(awesomiumHostType.Assembly.FullName, awesomiumHostType.FullName,
        false, BindingFlags.Default, null, new object[] { filename, BaseDirectory }, CultureInfo.CurrentCulture, null);

        host.SetHtml(content);

        var controlHandle = host.ControlHandle;

        Task.Factory.StartNew(() =&gt;
        {
            //Delay until preview control has loaded before creating content host
            host.LoadedWaitHandle.WaitOne();

            // We need to invoke on the Markpad dispatcher, we are currently in the host appdomains STA Thread.
            Dispatcher.BeginInvoke(new Action(() =&gt;
            {
                hwndContentHost = new HwndContentHost(controlHandle);
                //Without the border we don't get the dropshadows
                Content = new Border
                {
                    Background = Brushes.White,
                    Padding = new Thickness(3),
                    Child = hwndContentHost
                };
            }));
        }, TaskCreationOptions.LongRunning);

        host.Run();
        //I can't get this unloading without an error, 
        // I am gathering Application.Shutdown is causing the appdomain to shutdown too
        //AppDomain.Unload(hostAppDomain);
    });

    thread.SetApartmentState(ApartmentState.STA);
    thread.Start();
}
</code></pre>

<p>So what does this actually do!</p>

<p>First we create the AppDomain, and spin up a dedicated thread which will be the UI thread of new AppDomain.</p>

<pre><code>hostAppDomain = AppDomain.CreateDomain("HtmlPreviewDomain");

var thread = new Thread(() =&gt;
{
    // We initialise it all in here
});

thread.SetApartmentState(ApartmentState.STA);
thread.Start();
</code></pre>

<p>Inside this new thread, we create an instance of the AwesomiumHost, which is a class which can be marshalled across AppDomains</p>

<pre><code>public class AwesomiumHost : MarshalByRefObject, IDisposable
{
    public string FileName { get; private set; }
    public string Html { get; set; }
    public double ScrollPercentage { get; set; }

    public IntPtr ControlHandle { get; }
    public ManualResetEvent LoadedWaitHandle { get; }

    public void SetHtml(string content);
    public void WbProcentualZoom();
    public void Print();
    public void Run();

    public void Dispose();
}
</code></pre>

<p>So we create the instance and unwrap it:</p>

<pre><code>var awesomiumHostType = typeof(AwesomiumHost);
host = (AwesomiumHost)hostAppDomain.CreateInstanceAndUnwrap(awesomiumHostType.Assembly.FullName, awesomiumHostType.FullName,
        false, BindingFlags.Default, null, new object[] { filename, BaseDirectory }, CultureInfo.CurrentCulture, null);

host.SetHtml(content);
var controlHandle = host.ControlHandle;
</code></pre>

<p>This has gone and created the control, and got the ControlHandle which we need to host WPF controls across appdomains, there is some nasty code in the <code>static long CreateWindowHandle(Visual frameworkElement)</code> method if you want to know how to do it.</p>

<p>We then start a long running task (background operation in the preview appdomain) which blocks until the control has fully loaded (the LoadedWaitHandle is set once the Loaded event fires on the Awesomium control).</p>

<pre><code>Task.Factory.StartNew(() =&gt;
{
    //Delay until preview control has loaded before creating content host
    host.LoadedWaitHandle.WaitOne();

    // We need to invoke on the Markpad dispatcher, we are currently in the host appdomains STA Thread.
    Dispatcher.BeginInvoke(new Action(() =&gt;
    {
        hwndContentHost = new HwndContentHost(controlHandle);
        //Without the border we don't get the dropshadows
        Content = new Border
        {
            Background = Brushes.White,
            Padding = new Thickness(3),
            Child = hwndContentHost
        };
    }));
}, TaskCreationOptions.LongRunning);
</code></pre>

<p>We then invoke the creation of the content host on Markpads UI thread, and replace the content of the UserControl with the MarkPad preview.</p>

<p>There are a few more things, but this should help you follow the Markpad codebase if you ever want to host a WPF control in another AppDomain :)</p>

<h2>Links</h2>

<p>Go grab the source, have a look. If you are so inclined you can pick up a issue, and submit a pull request!</p>

<p><a href="https://github.com/Code52/DownmarkerWPF">https://github.com/Code52/DownmarkerWPF</a></p>
]]></content>
  </entry>
  
</feed>
